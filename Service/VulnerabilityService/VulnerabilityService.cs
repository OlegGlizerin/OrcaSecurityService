using Contracts.CloudEnvironment;
using Microsoft.Extensions.Logging;
using Service.BusinessModels;
using Service.BusinessModels.Vulnerability;
using System.Collections.Generic;
using System.Linq;

namespace Service.VulnerabilityService
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly ILogger _logger;

        public VulnerabilityService(ILogger<VulnerabilityService> logger)
        {
            _logger = logger;
        }

        public VulnerabilityResponseEntity GetPotentialAttackersVms(VulnerabilityRequestEntity entity)
        {
            _logger.LogInformation($"Start -> GetPotentialAttackersVms, get potential atackers for vmName: {entity.vmName}.");
            var vm = FindAttackedVm(entity.vmName, entity.CloudEnvironment);
            if(vm == null)
            {
                return new VulnerabilityResponseEntity();
            }
            var result = FindPotentialAttackers(entity.vmName, vm.tags, entity.CloudEnvironment);
            _logger.LogInformation($"Finished -> GetPotentialAttackersVms, return {result.PotentialAttackers.Count()} potential attackers vm's for vmName: {entity.vmName}.");
            return result;
        }

        private Vm FindAttackedVm(string vmName, Contracts.CloudEnvironment.CloudEnvironment cloudEnvironment)
        {
            _logger.LogInformation($"Start -> FindAttackedVm, trying to find the attacked VM in the Cloud Environment, vmName: {vmName}.");
            foreach (Vm vm in cloudEnvironment.vms)
            { 
                if(vm.vm_id.Equals(vmName))
                {
                    _logger.LogInformation($"Finished -> FindAttackedVm, attacker VM was found!, vmName: {vmName}");
                    return vm;
                }
            }
            _logger.LogError($"Finished -> FindAttackedVm, attacked VM wasn't found, vmName: {vmName}");
            return null;
        }

        private VulnerabilityResponseEntity FindPotentialAttackers(string vmName, List<string> victimTags, Contracts.CloudEnvironment.CloudEnvironment cloudEnvironment)
        {
            _logger.LogInformation($"Start -> FindPotentialAttackers, trying to find potential attackers for vmName: {vmName}.");
            IList<string> potentialAttackers = new List<string>();
            foreach (Vm vm in cloudEnvironment.vms)
            {
                if (vm.vm_id.Equals(vmName))
                {
                    //self attack
                    continue;
                }
                foreach(string tag in victimTags)
                {
                    if (vm.tags.Contains(tag))
                    {
                        potentialAttackers.Add(vm.vm_id);
                    }
                }
            }
            _logger.LogInformation($"Finish -> FindPotentialAttackers, found PotentialAttackers: {potentialAttackers.Count}, for vmName: {vmName}.");
            return new VulnerabilityResponseEntity { PotentialAttackers = potentialAttackers };
        }
    }
}
